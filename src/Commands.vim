" Keymaps.vim
command -range -nargs=* BulkMove :call _BulkMove()
command! -range -nargs=+ Move <line1>,<line2>call Move(<f-args>)
command -range -nargs=* SaveRoot :call SaveRoot()
command -range -nargs=+ Util call __util(<q-args>)
command -range -nargs=+ UtilizeVash call UtilizeVash(<f-args>)
command Implement :call Implement()
command -nargs=+ -complete=command Allargs call Allargs(<q-args>)
command -range -nargs=+ Utilize call Utilize(<f-args>)
command -range -nargs=+ OpenFile call OpenFile(<q-args>)
command -range -nargs=+ CtrlShiftP call CtrlShiftP(<q-args>)
command! RunLinter call RunLinterInBackground()
command -range -nargs=+ SelectFile call SelectFile(<q-args>)
command -range -nargs=+ Selection call Selection(<q-args>)
command -range -nargs=+ EE call EE(<q-args>)
command! Dashboard call Dashboard()
command! -nargs=1 Bs :call BufSel("<args>")
command -range -nargs=+ Debug call Debug(<f-args>)
command -range -nargs=+ CD call CD(<q-args>)
command -nargs=+ -complete=command TIN call TIN(<q-args>)
command -nargs=+ -complete=command Sys call Sys(<q-args>)
command -nargs=+ -complete=command Vim call Vim(<q-args>)
command! -range CountRegex '<,'>call CountRegex()<cr>
command! -range ToggleCommentFlip <line1>,<line2>call ToggleCommentFlip()
command -range -nargs=0 Cword <line1>,<line2>call Cword(<f-args>)
command -range -nargs=0 Cfile <line1>,<line2>call Cfile(<f-args>)
command -range -nargs=0 CurrentWord <line1>,<line2>call CurrentWord(<f-args>)
command -range -nargs=+ LeaderDot call LeaderDot(<q-args>)
command -range -nargs=1 WordsPerLine <line1>,<line2>call WordsPerLine(<args>)

command -range -nargs=+ Nmap <line1>,<line2>call Nmap(<f-args>)
command -range -nargs=+ Vmap <line1>,<line2>call Vmap(<f-args>)
command -range -nargs=+ Imap <line1>,<line2>call Imap(<f-args>)
command -range -nargs=+ Tmap <line1>,<line2>call Tmap(<f-args>)
command -range -nargs=+ Cmap <line1>,<line2>call Cmap(<f-args>)
command -range -nargs=+ Amap <line1>,<line2>call Amap(<f-args>)
command -range -nargs=+ INmap :call UNmap(<f-args>)
command -range -nargs=+ UVmap :call UVmap(<f-args>)
command -range -nargs=+ UImap :call UImap(<f-args>)
command -range -nargs=+ UTmap :call UTmap(<f-args>)
command -range -nargs=+ UCmap :call UCmap(<f-args>)
command -range -nargs=+ UAmap :call UAmap(<f-args>)

command -range -nargs=* LineUp :call LineUp(<f-args>)

command -range -nargs=0 LayoutVim <line1>,<line2>call LayoutVim()
command -range -nargs=0 LayoutBash <line1>,<line2>call Layout_Bash()

command -range -nargs=0 BASH <line1>,<line2>call BASH()
command -range -nargs=1 VIM <line1>,<line2>call VIM(<q-args>)
command -range -nargs=0 VIMCOMMENT <line1>,<line2>call VIMCOMMENT()
command -range -nargs=0 PYTHON <line1>,<line2>call PYTHON()

command -nargs=? LsQF call ListInQuickfix(<q-args>)
command -range -nargs=* FindCols call FindStringColumns(<q-args>)
command -range -nargs=* FindCharCols call FindCharColumns(<q-args>)
" Command to run :global with the function
" command -range -nargs=* FindMatches <line1>,<line2>g/bar/call ProcessMatches(<q-args>)
command! -range -nargs=* FindMatches <line1>,<line2>g/bar/call ProcessMatches(<q-args>)
command! -range -nargs=* ProcessMatches <line1>,<line2>call ProcessMatches(<q-args>)
command -range -nargs=0 RemoveCR <line1>,<line2>call RemoveCR()

command -nargs=1 SearchOpenFile call SearchOpenFile(<q-args>)

command -nargs=0 BuildProject <line1>,<line2>call BuildProject()
command -nargs=0 RunProject <line1>,<line2>call RunProject()
command -nargs=0 MakeProject <line1>,<line2>call MakeProject()
command -nargs=0 CTagsProject <line1>,<line2>call CTagsProject()

command! -range ToggleVertical <line1>,<line2>call ToggleVertical()
command! -range ToggleC <line1>,<line2>call ToggleC()

command -nargs=0 -range MoveCommentsToEnd <line1>,<line2>call MoveCommentsToEnd()
command -nargs=0 -range PruneEmptyLines <line1>,<line2>call PruneEmptyLines()
command -nargs=0 -range DeleteEmptyLines <line1>,<line2>call DeleteEmptyLines()
command -nargs=0 -range DeleteNumbersAtTheBeginning <line1>,<line2>call DeleteNumbersAtTheBeginning()

command -nargs=0 RepeatLastCommand call RepeatLastCommand()

command -range -nargs=* AddFunction <line1>,<line2>call AddFunction(<q-args>)
command -range -nargs=0 AddFunctionUserInput <line1>,<line2>call AddFunctionUserInput()
command -range -nargs=0 AddFunctionVisualSplit <line1>,<line2>call AddFunctionVisualSplit()
command -nargs=0 -range InsertFunction <line1>,<line2>call InsertFunction()
command -nargs=0 -range InsertFilename <line1>,<line2>call InsertFilename()
command -nargs=0 -range CopyFileNameToClipboard <line1>,<line2>call CopyFileNameToClipboard()
command -nargs=0 -range CopyWholePathToClipboard <line1>,<line2>call CopyWholePathToClipboard()
command -nargs=? -range InsertReceiver <line1>,<line2>call InsertReceiver(<q-args>)
command -nargs=0 -range BuildThis <line1>,<line2>call BuildThis()

command! -range -nargs=* UNREG <line1>,<line2>call UNREG(<f-args>)
command! -range -nargs=* SETREG <line1>,<line2>call SETREG(<f-args>)
command! -range -nargs=1 GETREG <line1>,<line2>call GETREG(<q-args>)
command! -range -nargs=* COP <line1>,<line2>call COP(<f-args>)
command! -range -nargs=* REPLACE <line1>,<line2>call REPLACE(<f-args>)
command! -range -nargs=* CUT <line1>,<line2>call CUT(<f-args>)
command! -range -nargs=* CreateMarker <line1>,<line2>call CreateMarker(<f-args>)
command! -range -nargs=* ASK <line1>,<line2>call ASK(<f-args>)
command! -range -nargs=* CUTG <line1>,<line2>call CUTG(<f-args>)

command -nargs=0 -range VisualSelection <line1>,<line2>call VisualSelection()

command -nargs=* -complete=command SETCOLOR call SETCOLOR(<f-args>)
command -nargs=* -complete=command COLOR call COLOR(<f-args>)

command -nargs=0 -range OpenFileCommandLineProject <line1>,<line2>call OpenFileCommandLineProject()
command -nargs=0 -range OpenFileCommandLineSameDir <line1>,<line2>call OpenFileCommandLineSameDir()
command -nargs=0 -range OpenFileCommandLineRepo <line1>,<line2>call OpenFileCommandLineRepo()
command -nargs=0 -range OpenFileCommandLineSystem <line1>,<line2>call OpenFileCommandLineSystem()
command -nargs=0 -range OpenFileFZFProject <line1>,<line2>call OpenFileFZFProject()
command -nargs=0 -range OpenFileFZFRepo <line1>,<line2>call OpenFileFZFRepo()
command -nargs=0 -range OpenFileFZFSystem <line1>,<line2>call OpenFileFZFSystem()
command -nargs=0 -range SetProjectCommandLineProject <line1>,<line2>call SetProjectCommandLine()
command -nargs=0 -range SetProjectCommandLineSystem <line1>,<line2>call SetProjectCommandLine()
command -nargs=0 -range SetProjectFZFProject <line1>,<line2>call SetProjectFZFProject()
command -nargs=0 -range SetProjectFZFSystemAndFile <line1>,<line2>call SetProjectFZFSystemAndFile()
command -nargs=0 -range SetProjectFZFProjectAndFile <line1>,<line2>call SetProjectFZFProjectAndFile()
command -nargs=0 -range JumpProjectUp call JumpProjectUp()
command -nargs=0 -range JumpProjectStepwise call JumpProjectStepwise()
command -nargs=0 -range JumpProjectIn call JumpProjectIn()
command -nargs=0 -range JumpProjectL call JumpProjectL()
command -nargs=0 -range JumpProjectR call JumpProjectR()
command -nargs=0 -range JumpProjectDump call JumpProjectDump()
command -nargs=0 -range SetProjectFZFSystem <line1>,<line2>call SetProjectFZFSystem()

command -nargs=0 -range MakeDirCurrentProject <line1>,<line2>call MakeDirCurrentProject()
command -nargs=0 -range SaveFile <line1>,<line2>call SaveFile()

" command! -nargs=0 SearchCword exec "vimgrep /\<<cword>\>/j **/*" | copen | cbottom
command! -nargs=0 SearchCword exec "vimgrep /<cword>/j "..GetProject().."/**" | copen | cbottom

command -nargs=0 -range Build <line1>,<line2>call Build()
command -nargs=0 -range BuildStop <line1>,<line2>call BuildStop()
command -nargs=0 -range Run <line1>,<line2>call Run()
command -nargs=0 -range EXEC <line1>,<line2>call EXEC()
command -nargs=0 -range EXECTOGGLE <line1>,<line2>call EXECTOGGLE()
command -nargs=0 -range INTERPRETERTOGGLE <line1>,<line2>call INTERPRETERTOGGLE()
command! -nargs=+ CheckListContains call s:CheckList(<q-args>)
